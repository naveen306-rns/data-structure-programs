#include <stdio.h>
#include <stdlib.h>

// Definition of the tree node
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a new node into the BST
Node* insertNode(Node* root, int data) {
    if (root == NULL) {
        // If the tree is empty, return a new node
        return createNode(data);
    }

    // Otherwise, recur down the tree
    if (data < root->data) {
        // Insert in the left subtree
        root->left = insertNode(root->left, data);
    } else if (data > root->data) {
        // Insert in the right subtree
        root->right = insertNode(root->right, data);
    }

    // Return the (unchanged) node pointer
    return root;
}

// Function to perform in-order traversal
void inOrderTraversal(Node* root) {
    if (root == NULL) {
        return;
    }
    
    // Traverse the left subtree
    inOrderTraversal(root->left);
    
    // Visit the root node
    printf("%d ", root->data);
    
    // Traverse the right subtree
    inOrderTraversal(root->right);
}

// Function to free the memory allocated for the tree
void freeTree(Node* root) {
    if (root == NULL) {
        return;
    }
    // Free the left subtree
    freeTree(root->left);
    // Free the right subtree
    freeTree(root->right);
    // Free the current node
    free(root);
}

// Main function to demonstrate the insertion and in-order traversal
int main() {
    Node* root = NULL; // Initialize an empty tree

    // Insert elements into the BST
    root = insertNode(root, 4);
    insertNode(root, 2);
    insertNode(root, 6);
    insertNode(root, 1);
    insertNode(root, 3);
    insertNode(root, 5);
    insertNode(root, 7);

    printf("In-order Traversal of the Binary Search Tree:\n");
    inOrderTraversal(root);
    printf("\n");

    // Free allocated memory
    freeTree(root);

    return 0;
}
