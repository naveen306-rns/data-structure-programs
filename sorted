#include <stdio.h>
#include <stdlib.h>

// Definition of the tree node
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to perform in-order traversal
void inOrderTraversal(Node* root) {
    if (root == NULL) {
        return;
    }
    
    // Traverse the left subtree
    inOrderTraversal(root->left);
    
    // Visit the root node
    printf("%d ", root->data);
    
    // Traverse the right subtree
    inOrderTraversal(root->right);
}

// Main function to demonstrate the in-order traversal
int main() {
    // Creating a simple binary search tree
    Node* root = createNode(4);
    root->left = createNode(2);
    root->right = createNode(6);
    root->left->left = createNode(1);
    root->left->right = createNode(3);
    root->right->left = createNode(5);
    root->right->right = createNode(7);
    
    printf("In-order Traversal of the Binary Tree:\n");
    inOrderTraversal(root);
    printf("\n");
    
    // Free allocated memory (for a real program, you'd need to implement tree deletion)
    
    return 0;
}
